module Expression

imports
  Common
  
context-free start-symbols
  Exp
  
context-free syntax


  Exp = <(<Exp>)> {bracket}
  
  Exp.MemberAccess       = <<Exp>.<ID>>            {left}
  Exp.Not                = <!<Exp>>                {right}

  Exp.Multiplication     = <<Exp> * <Exp>>         {left}
  Exp.Division           = <<Exp> / <Exp>>         {left}
  Exp.Modulo             = <<Exp> % <Exp>>         {left}
  Exp.Addition           = <<Exp> + <Exp>>         {left}
  Exp.Subtraction        = <<Exp> - <Exp>>         {left}

  Exp.LessThan           = <<Exp> \< <Exp>>        {left}
  Exp.LessThanEqual      = <<Exp> \<= <Exp>>       {left}
  Exp.GreaterThan        = <<Exp> \> <Exp>>        {left}
  Exp.GreaterThanEqual   = <<Exp> \>= <Exp>>       {left}
  Exp.Equal              = <<Exp> == <Exp>>        {left}
  Exp.Inequal            = <<Exp> != <Exp>>        {left}
  Exp.And                = <<Exp> && <Exp>>        {left}
  Exp.Or                 = <<Exp> || <Exp>>        {left}
  Exp.If                 = <if(<Exp>) <Exp> else <Exp>> {right}
  Exp.Merge              = <<Exp> ++ <Exp>>        {left}
  Exp.ChoiceLeft         = [[Exp] <+ [Exp]]        {left}

  Exp.Apply              = <<Exp>(<{Exp ","}*>)>           {left}

  Exp = Literal
  Literal.Int = INT
  Literal.Float = FLOAT
  Literal.String = STRING
  Literal.True = <true>
  Literal.False = <false>
  Literal.Null = <null>

  Exp.Ref = ID
  
context-free priorities


  { left:
    Exp.Apply
  } >
  { left:
    Exp.MemberAccess
  } >  
  { right:
    Exp.Not
  } >
  { left:
    Exp.Multiplication
    Exp.Division
    Exp.Modulo
  } >
  { left:
    Exp.Addition
    Exp.Subtraction
  } >
  { left:
    Exp.LessThan
    Exp.LessThanEqual
    Exp.GreaterThan
    Exp.GreaterThanEqual
  } >
  { left:
    Exp.Equal
    Exp.Inequal
  } >
  { left:
    Exp.And
  } >
  { left:
    Exp.Or
  } >
  { right:
    Exp.If
  } >
  { left:
    Exp.Merge
  } >
  { left:
    Exp.ChoiceLeft
  }