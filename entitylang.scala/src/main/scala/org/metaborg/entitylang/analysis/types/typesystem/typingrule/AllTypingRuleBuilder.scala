package org.metaborg.entitylang.analysis.types.typesystem.typingrule

import org.metaborg.entitylang.analysis.types.typesystem.TypeSystem
import org.metaborg.entitylang.util._
import org.metaborg.entitylang.util.monoid.TupleExtensions
import org.metaborg.entitylang.analysis.types.typesystem._
import org.metaborg.scalaterms.HasOrigin

class AllTypingRuleBuilder[TermType <: HasOrigin, TypeType] extends AnyRef{
  def apply[T1, T2](r1: TypingRule.Aux[TermType, TypeType, T1], r2: TypingRule.Aux[TermType, TypeType, T2])(implicit typeSystem: TypeSystem[TermType, TypeType]): TypingRule.Aux[TermType, TypeType, (T1, T2)] = {
    val t1 = r1.run
    val t2 = r2.run
    typeRule.result(r1.run.merge(r2.run))
  }

  def apply[T0, T1, T2](r0: TypingRule.Aux[TermType, TypeType, T0],r1: TypingRule.Aux[TermType, TypeType, T1],r2: TypingRule.Aux[TermType, TypeType, T2])(implicit typeSystem: TypeSystem[TermType, TypeType]): TypingRule.Aux[TermType, TypeType, (T0, T1, T2)] = apply(apply(r0, r1), r2).map(tpl => TupleExtensions.flatten(tpl))
  def apply[T0, T1, T2, T3](r0: TypingRule.Aux[TermType, TypeType, T0],r1: TypingRule.Aux[TermType, TypeType, T1],r2: TypingRule.Aux[TermType, TypeType, T2],r3: TypingRule.Aux[TermType, TypeType, T3])(implicit typeSystem: TypeSystem[TermType, TypeType]): TypingRule.Aux[TermType, TypeType, (T0, T1, T2, T3)] = apply(apply(apply(r0, r1), r2), r3).map(tpl => TupleExtensions.flatten(tpl))
  def apply[T0, T1, T2, T3, T4](r0: TypingRule.Aux[TermType, TypeType, T0],r1: TypingRule.Aux[TermType, TypeType, T1],r2: TypingRule.Aux[TermType, TypeType, T2],r3: TypingRule.Aux[TermType, TypeType, T3],r4: TypingRule.Aux[TermType, TypeType, T4])(implicit typeSystem: TypeSystem[TermType, TypeType]): TypingRule.Aux[TermType, TypeType, (T0, T1, T2, T3, T4)] = apply(apply(apply(apply(r0, r1), r2), r3), r4).map(tpl => TupleExtensions.flatten(tpl))
  def apply[T0, T1, T2, T3, T4, T5](r0: TypingRule.Aux[TermType, TypeType, T0],r1: TypingRule.Aux[TermType, TypeType, T1],r2: TypingRule.Aux[TermType, TypeType, T2],r3: TypingRule.Aux[TermType, TypeType, T3],r4: TypingRule.Aux[TermType, TypeType, T4],r5: TypingRule.Aux[TermType, TypeType, T5])(implicit typeSystem: TypeSystem[TermType, TypeType]): TypingRule.Aux[TermType, TypeType, (T0, T1, T2, T3, T4, T5)] = apply(apply(apply(apply(apply(r0, r1), r2), r3), r4), r5).map(tpl => TupleExtensions.flatten(tpl))
  def apply[T0, T1, T2, T3, T4, T5, T6](r0: TypingRule.Aux[TermType, TypeType, T0],r1: TypingRule.Aux[TermType, TypeType, T1],r2: TypingRule.Aux[TermType, TypeType, T2],r3: TypingRule.Aux[TermType, TypeType, T3],r4: TypingRule.Aux[TermType, TypeType, T4],r5: TypingRule.Aux[TermType, TypeType, T5],r6: TypingRule.Aux[TermType, TypeType, T6])(implicit typeSystem: TypeSystem[TermType, TypeType]): TypingRule.Aux[TermType, TypeType, (T0, T1, T2, T3, T4, T5, T6)] = apply(apply(apply(apply(apply(apply(r0, r1), r2), r3), r4), r5), r6).map(tpl => TupleExtensions.flatten(tpl))
  def apply[T0, T1, T2, T3, T4, T5, T6, T7](r0: TypingRule.Aux[TermType, TypeType, T0],r1: TypingRule.Aux[TermType, TypeType, T1],r2: TypingRule.Aux[TermType, TypeType, T2],r3: TypingRule.Aux[TermType, TypeType, T3],r4: TypingRule.Aux[TermType, TypeType, T4],r5: TypingRule.Aux[TermType, TypeType, T5],r6: TypingRule.Aux[TermType, TypeType, T6],r7: TypingRule.Aux[TermType, TypeType, T7])(implicit typeSystem: TypeSystem[TermType, TypeType]): TypingRule.Aux[TermType, TypeType, (T0, T1, T2, T3, T4, T5, T6, T7)] = apply(apply(apply(apply(apply(apply(apply(r0, r1), r2), r3), r4), r5), r6), r7).map(tpl => TupleExtensions.flatten(tpl))
  def apply[T0, T1, T2, T3, T4, T5, T6, T7, T8](r0: TypingRule.Aux[TermType, TypeType, T0],r1: TypingRule.Aux[TermType, TypeType, T1],r2: TypingRule.Aux[TermType, TypeType, T2],r3: TypingRule.Aux[TermType, TypeType, T3],r4: TypingRule.Aux[TermType, TypeType, T4],r5: TypingRule.Aux[TermType, TypeType, T5],r6: TypingRule.Aux[TermType, TypeType, T6],r7: TypingRule.Aux[TermType, TypeType, T7],r8: TypingRule.Aux[TermType, TypeType, T8])(implicit typeSystem: TypeSystem[TermType, TypeType]): TypingRule.Aux[TermType, TypeType, (T0, T1, T2, T3, T4, T5, T6, T7, T8)] = apply(apply(apply(apply(apply(apply(apply(apply(r0, r1), r2), r3), r4), r5), r6), r7), r8).map(tpl => TupleExtensions.flatten(tpl))
  def apply[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9](r0: TypingRule.Aux[TermType, TypeType, T0],r1: TypingRule.Aux[TermType, TypeType, T1],r2: TypingRule.Aux[TermType, TypeType, T2],r3: TypingRule.Aux[TermType, TypeType, T3],r4: TypingRule.Aux[TermType, TypeType, T4],r5: TypingRule.Aux[TermType, TypeType, T5],r6: TypingRule.Aux[TermType, TypeType, T6],r7: TypingRule.Aux[TermType, TypeType, T7],r8: TypingRule.Aux[TermType, TypeType, T8],r9: TypingRule.Aux[TermType, TypeType, T9])(implicit typeSystem: TypeSystem[TermType, TypeType]): TypingRule.Aux[TermType, TypeType, (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9)] = apply(apply(apply(apply(apply(apply(apply(apply(apply(r0, r1), r2), r3), r4), r5), r6), r7), r8), r9).map(tpl => TupleExtensions.flatten(tpl))
  def apply[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10](r0: TypingRule.Aux[TermType, TypeType, T0],r1: TypingRule.Aux[TermType, TypeType, T1],r2: TypingRule.Aux[TermType, TypeType, T2],r3: TypingRule.Aux[TermType, TypeType, T3],r4: TypingRule.Aux[TermType, TypeType, T4],r5: TypingRule.Aux[TermType, TypeType, T5],r6: TypingRule.Aux[TermType, TypeType, T6],r7: TypingRule.Aux[TermType, TypeType, T7],r8: TypingRule.Aux[TermType, TypeType, T8],r9: TypingRule.Aux[TermType, TypeType, T9],r10: TypingRule.Aux[TermType, TypeType, T10])(implicit typeSystem: TypeSystem[TermType, TypeType]): TypingRule.Aux[TermType, TypeType, (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10)] = apply(apply(apply(apply(apply(apply(apply(apply(apply(apply(r0, r1), r2), r3), r4), r5), r6), r7), r8), r9), r10).map(tpl => TupleExtensions.flatten(tpl))
  def apply[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11](r0: TypingRule.Aux[TermType, TypeType, T0],r1: TypingRule.Aux[TermType, TypeType, T1],r2: TypingRule.Aux[TermType, TypeType, T2],r3: TypingRule.Aux[TermType, TypeType, T3],r4: TypingRule.Aux[TermType, TypeType, T4],r5: TypingRule.Aux[TermType, TypeType, T5],r6: TypingRule.Aux[TermType, TypeType, T6],r7: TypingRule.Aux[TermType, TypeType, T7],r8: TypingRule.Aux[TermType, TypeType, T8],r9: TypingRule.Aux[TermType, TypeType, T9],r10: TypingRule.Aux[TermType, TypeType, T10],r11: TypingRule.Aux[TermType, TypeType, T11])(implicit typeSystem: TypeSystem[TermType, TypeType]): TypingRule.Aux[TermType, TypeType, (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11)] = apply(apply(apply(apply(apply(apply(apply(apply(apply(apply(apply(r0, r1), r2), r3), r4), r5), r6), r7), r8), r9), r10), r11).map(tpl => TupleExtensions.flatten(tpl))
  def apply[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12](r0: TypingRule.Aux[TermType, TypeType, T0],r1: TypingRule.Aux[TermType, TypeType, T1],r2: TypingRule.Aux[TermType, TypeType, T2],r3: TypingRule.Aux[TermType, TypeType, T3],r4: TypingRule.Aux[TermType, TypeType, T4],r5: TypingRule.Aux[TermType, TypeType, T5],r6: TypingRule.Aux[TermType, TypeType, T6],r7: TypingRule.Aux[TermType, TypeType, T7],r8: TypingRule.Aux[TermType, TypeType, T8],r9: TypingRule.Aux[TermType, TypeType, T9],r10: TypingRule.Aux[TermType, TypeType, T10],r11: TypingRule.Aux[TermType, TypeType, T11],r12: TypingRule.Aux[TermType, TypeType, T12])(implicit typeSystem: TypeSystem[TermType, TypeType]): TypingRule.Aux[TermType, TypeType, (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12)] = apply(apply(apply(apply(apply(apply(apply(apply(apply(apply(apply(apply(r0, r1), r2), r3), r4), r5), r6), r7), r8), r9), r10), r11), r12).map(tpl => TupleExtensions.flatten(tpl))
  def apply[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13](r0: TypingRule.Aux[TermType, TypeType, T0],r1: TypingRule.Aux[TermType, TypeType, T1],r2: TypingRule.Aux[TermType, TypeType, T2],r3: TypingRule.Aux[TermType, TypeType, T3],r4: TypingRule.Aux[TermType, TypeType, T4],r5: TypingRule.Aux[TermType, TypeType, T5],r6: TypingRule.Aux[TermType, TypeType, T6],r7: TypingRule.Aux[TermType, TypeType, T7],r8: TypingRule.Aux[TermType, TypeType, T8],r9: TypingRule.Aux[TermType, TypeType, T9],r10: TypingRule.Aux[TermType, TypeType, T10],r11: TypingRule.Aux[TermType, TypeType, T11],r12: TypingRule.Aux[TermType, TypeType, T12],r13: TypingRule.Aux[TermType, TypeType, T13])(implicit typeSystem: TypeSystem[TermType, TypeType]): TypingRule.Aux[TermType, TypeType, (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13)] = apply(apply(apply(apply(apply(apply(apply(apply(apply(apply(apply(apply(apply(r0, r1), r2), r3), r4), r5), r6), r7), r8), r9), r10), r11), r12), r13).map(tpl => TupleExtensions.flatten(tpl))
  def apply[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14](r0: TypingRule.Aux[TermType, TypeType, T0],r1: TypingRule.Aux[TermType, TypeType, T1],r2: TypingRule.Aux[TermType, TypeType, T2],r3: TypingRule.Aux[TermType, TypeType, T3],r4: TypingRule.Aux[TermType, TypeType, T4],r5: TypingRule.Aux[TermType, TypeType, T5],r6: TypingRule.Aux[TermType, TypeType, T6],r7: TypingRule.Aux[TermType, TypeType, T7],r8: TypingRule.Aux[TermType, TypeType, T8],r9: TypingRule.Aux[TermType, TypeType, T9],r10: TypingRule.Aux[TermType, TypeType, T10],r11: TypingRule.Aux[TermType, TypeType, T11],r12: TypingRule.Aux[TermType, TypeType, T12],r13: TypingRule.Aux[TermType, TypeType, T13],r14: TypingRule.Aux[TermType, TypeType, T14])(implicit typeSystem: TypeSystem[TermType, TypeType]): TypingRule.Aux[TermType, TypeType, (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14)] = apply(apply(apply(apply(apply(apply(apply(apply(apply(apply(apply(apply(apply(apply(r0, r1), r2), r3), r4), r5), r6), r7), r8), r9), r10), r11), r12), r13), r14).map(tpl => TupleExtensions.flatten(tpl))
  def apply[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15](r0: TypingRule.Aux[TermType, TypeType, T0],r1: TypingRule.Aux[TermType, TypeType, T1],r2: TypingRule.Aux[TermType, TypeType, T2],r3: TypingRule.Aux[TermType, TypeType, T3],r4: TypingRule.Aux[TermType, TypeType, T4],r5: TypingRule.Aux[TermType, TypeType, T5],r6: TypingRule.Aux[TermType, TypeType, T6],r7: TypingRule.Aux[TermType, TypeType, T7],r8: TypingRule.Aux[TermType, TypeType, T8],r9: TypingRule.Aux[TermType, TypeType, T9],r10: TypingRule.Aux[TermType, TypeType, T10],r11: TypingRule.Aux[TermType, TypeType, T11],r12: TypingRule.Aux[TermType, TypeType, T12],r13: TypingRule.Aux[TermType, TypeType, T13],r14: TypingRule.Aux[TermType, TypeType, T14],r15: TypingRule.Aux[TermType, TypeType, T15])(implicit typeSystem: TypeSystem[TermType, TypeType]): TypingRule.Aux[TermType, TypeType, (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15)] = apply(apply(apply(apply(apply(apply(apply(apply(apply(apply(apply(apply(apply(apply(apply(r0, r1), r2), r3), r4), r5), r6), r7), r8), r9), r10), r11), r12), r13), r14), r15).map(tpl => TupleExtensions.flatten(tpl))
  def apply[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16](r0: TypingRule.Aux[TermType, TypeType, T0],r1: TypingRule.Aux[TermType, TypeType, T1],r2: TypingRule.Aux[TermType, TypeType, T2],r3: TypingRule.Aux[TermType, TypeType, T3],r4: TypingRule.Aux[TermType, TypeType, T4],r5: TypingRule.Aux[TermType, TypeType, T5],r6: TypingRule.Aux[TermType, TypeType, T6],r7: TypingRule.Aux[TermType, TypeType, T7],r8: TypingRule.Aux[TermType, TypeType, T8],r9: TypingRule.Aux[TermType, TypeType, T9],r10: TypingRule.Aux[TermType, TypeType, T10],r11: TypingRule.Aux[TermType, TypeType, T11],r12: TypingRule.Aux[TermType, TypeType, T12],r13: TypingRule.Aux[TermType, TypeType, T13],r14: TypingRule.Aux[TermType, TypeType, T14],r15: TypingRule.Aux[TermType, TypeType, T15],r16: TypingRule.Aux[TermType, TypeType, T16])(implicit typeSystem: TypeSystem[TermType, TypeType]): TypingRule.Aux[TermType, TypeType, (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16)] = apply(apply(apply(apply(apply(apply(apply(apply(apply(apply(apply(apply(apply(apply(apply(apply(r0, r1), r2), r3), r4), r5), r6), r7), r8), r9), r10), r11), r12), r13), r14), r15), r16).map(tpl => TupleExtensions.flatten(tpl))
  def apply[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17](r0: TypingRule.Aux[TermType, TypeType, T0],r1: TypingRule.Aux[TermType, TypeType, T1],r2: TypingRule.Aux[TermType, TypeType, T2],r3: TypingRule.Aux[TermType, TypeType, T3],r4: TypingRule.Aux[TermType, TypeType, T4],r5: TypingRule.Aux[TermType, TypeType, T5],r6: TypingRule.Aux[TermType, TypeType, T6],r7: TypingRule.Aux[TermType, TypeType, T7],r8: TypingRule.Aux[TermType, TypeType, T8],r9: TypingRule.Aux[TermType, TypeType, T9],r10: TypingRule.Aux[TermType, TypeType, T10],r11: TypingRule.Aux[TermType, TypeType, T11],r12: TypingRule.Aux[TermType, TypeType, T12],r13: TypingRule.Aux[TermType, TypeType, T13],r14: TypingRule.Aux[TermType, TypeType, T14],r15: TypingRule.Aux[TermType, TypeType, T15],r16: TypingRule.Aux[TermType, TypeType, T16],r17: TypingRule.Aux[TermType, TypeType, T17])(implicit typeSystem: TypeSystem[TermType, TypeType]): TypingRule.Aux[TermType, TypeType, (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17)] = apply(apply(apply(apply(apply(apply(apply(apply(apply(apply(apply(apply(apply(apply(apply(apply(apply(r0, r1), r2), r3), r4), r5), r6), r7), r8), r9), r10), r11), r12), r13), r14), r15), r16), r17).map(tpl => TupleExtensions.flatten(tpl))
  def apply[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18](r0: TypingRule.Aux[TermType, TypeType, T0],r1: TypingRule.Aux[TermType, TypeType, T1],r2: TypingRule.Aux[TermType, TypeType, T2],r3: TypingRule.Aux[TermType, TypeType, T3],r4: TypingRule.Aux[TermType, TypeType, T4],r5: TypingRule.Aux[TermType, TypeType, T5],r6: TypingRule.Aux[TermType, TypeType, T6],r7: TypingRule.Aux[TermType, TypeType, T7],r8: TypingRule.Aux[TermType, TypeType, T8],r9: TypingRule.Aux[TermType, TypeType, T9],r10: TypingRule.Aux[TermType, TypeType, T10],r11: TypingRule.Aux[TermType, TypeType, T11],r12: TypingRule.Aux[TermType, TypeType, T12],r13: TypingRule.Aux[TermType, TypeType, T13],r14: TypingRule.Aux[TermType, TypeType, T14],r15: TypingRule.Aux[TermType, TypeType, T15],r16: TypingRule.Aux[TermType, TypeType, T16],r17: TypingRule.Aux[TermType, TypeType, T17],r18: TypingRule.Aux[TermType, TypeType, T18])(implicit typeSystem: TypeSystem[TermType, TypeType]): TypingRule.Aux[TermType, TypeType, (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18)] = apply(apply(apply(apply(apply(apply(apply(apply(apply(apply(apply(apply(apply(apply(apply(apply(apply(apply(r0, r1), r2), r3), r4), r5), r6), r7), r8), r9), r10), r11), r12), r13), r14), r15), r16), r17), r18).map(tpl => TupleExtensions.flatten(tpl))
  def apply[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19](r0: TypingRule.Aux[TermType, TypeType, T0],r1: TypingRule.Aux[TermType, TypeType, T1],r2: TypingRule.Aux[TermType, TypeType, T2],r3: TypingRule.Aux[TermType, TypeType, T3],r4: TypingRule.Aux[TermType, TypeType, T4],r5: TypingRule.Aux[TermType, TypeType, T5],r6: TypingRule.Aux[TermType, TypeType, T6],r7: TypingRule.Aux[TermType, TypeType, T7],r8: TypingRule.Aux[TermType, TypeType, T8],r9: TypingRule.Aux[TermType, TypeType, T9],r10: TypingRule.Aux[TermType, TypeType, T10],r11: TypingRule.Aux[TermType, TypeType, T11],r12: TypingRule.Aux[TermType, TypeType, T12],r13: TypingRule.Aux[TermType, TypeType, T13],r14: TypingRule.Aux[TermType, TypeType, T14],r15: TypingRule.Aux[TermType, TypeType, T15],r16: TypingRule.Aux[TermType, TypeType, T16],r17: TypingRule.Aux[TermType, TypeType, T17],r18: TypingRule.Aux[TermType, TypeType, T18],r19: TypingRule.Aux[TermType, TypeType, T19])(implicit typeSystem: TypeSystem[TermType, TypeType]): TypingRule.Aux[TermType, TypeType, (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19)] = apply(apply(apply(apply(apply(apply(apply(apply(apply(apply(apply(apply(apply(apply(apply(apply(apply(apply(apply(r0, r1), r2), r3), r4), r5), r6), r7), r8), r9), r10), r11), r12), r13), r14), r15), r16), r17), r18), r19).map(tpl => TupleExtensions.flatten(tpl))
  def apply[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20](r0: TypingRule.Aux[TermType, TypeType, T0],r1: TypingRule.Aux[TermType, TypeType, T1],r2: TypingRule.Aux[TermType, TypeType, T2],r3: TypingRule.Aux[TermType, TypeType, T3],r4: TypingRule.Aux[TermType, TypeType, T4],r5: TypingRule.Aux[TermType, TypeType, T5],r6: TypingRule.Aux[TermType, TypeType, T6],r7: TypingRule.Aux[TermType, TypeType, T7],r8: TypingRule.Aux[TermType, TypeType, T8],r9: TypingRule.Aux[TermType, TypeType, T9],r10: TypingRule.Aux[TermType, TypeType, T10],r11: TypingRule.Aux[TermType, TypeType, T11],r12: TypingRule.Aux[TermType, TypeType, T12],r13: TypingRule.Aux[TermType, TypeType, T13],r14: TypingRule.Aux[TermType, TypeType, T14],r15: TypingRule.Aux[TermType, TypeType, T15],r16: TypingRule.Aux[TermType, TypeType, T16],r17: TypingRule.Aux[TermType, TypeType, T17],r18: TypingRule.Aux[TermType, TypeType, T18],r19: TypingRule.Aux[TermType, TypeType, T19],r20: TypingRule.Aux[TermType, TypeType, T20])(implicit typeSystem: TypeSystem[TermType, TypeType]): TypingRule.Aux[TermType, TypeType, (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20)] = apply(apply(apply(apply(apply(apply(apply(apply(apply(apply(apply(apply(apply(apply(apply(apply(apply(apply(apply(apply(r0, r1), r2), r3), r4), r5), r6), r7), r8), r9), r10), r11), r12), r13), r14), r15), r16), r17), r18), r19), r20).map(tpl => TupleExtensions.flatten(tpl))
  def apply[T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21](r0: TypingRule.Aux[TermType, TypeType, T0],r1: TypingRule.Aux[TermType, TypeType, T1],r2: TypingRule.Aux[TermType, TypeType, T2],r3: TypingRule.Aux[TermType, TypeType, T3],r4: TypingRule.Aux[TermType, TypeType, T4],r5: TypingRule.Aux[TermType, TypeType, T5],r6: TypingRule.Aux[TermType, TypeType, T6],r7: TypingRule.Aux[TermType, TypeType, T7],r8: TypingRule.Aux[TermType, TypeType, T8],r9: TypingRule.Aux[TermType, TypeType, T9],r10: TypingRule.Aux[TermType, TypeType, T10],r11: TypingRule.Aux[TermType, TypeType, T11],r12: TypingRule.Aux[TermType, TypeType, T12],r13: TypingRule.Aux[TermType, TypeType, T13],r14: TypingRule.Aux[TermType, TypeType, T14],r15: TypingRule.Aux[TermType, TypeType, T15],r16: TypingRule.Aux[TermType, TypeType, T16],r17: TypingRule.Aux[TermType, TypeType, T17],r18: TypingRule.Aux[TermType, TypeType, T18],r19: TypingRule.Aux[TermType, TypeType, T19],r20: TypingRule.Aux[TermType, TypeType, T20],r21: TypingRule.Aux[TermType, TypeType, T21])(implicit typeSystem: TypeSystem[TermType, TypeType]): TypingRule.Aux[TermType, TypeType, (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21)] = apply(apply(apply(apply(apply(apply(apply(apply(apply(apply(apply(apply(apply(apply(apply(apply(apply(apply(apply(apply(apply(r0, r1), r2), r3), r4), r5), r6), r7), r8), r9), r10), r11), r12), r13), r14), r15), r16), r17), r18), r19), r20), r21).map(tpl => TupleExtensions.flatten(tpl))
}
