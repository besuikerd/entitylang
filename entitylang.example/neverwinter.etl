
entity Character {
  name : String

  // ability scores
  baseStrength     : Int
  baseConstitution : Int
  baseDexterity    : Int
  baseIntelligence : Int
  baseWisdom       : Int
  baseCharisma     : Int

  levelStrength = levelStrengthValue <+  0 
  levelStrengthValue: Int?
  levelConstitution = levelConstitutionValue <+  0 
  levelConstitutionValue: Int?
  levelDexterity = levelDexterityValue <+  0 
  levelDexterityValue: Int?
  levelIntelligence = levelIntelligenceValue <+  0 
  levelIntelligenceValue: Int?
  levelWisdom = levelWisdomValue <+  0 
  levelWisdomValue: Int?
  levelCharisma = levelCharismaValue <+  0 
  levelCharismaValue: Int?

  raceStrength = raceStrengthValue <+  0 
  raceStrengthValue: Int?
  raceConstitution = raceConstitutionValue <+  0 
  raceConstitutionValue: Int?
  raceDexterity = raceDexterityValue <+  0 
  raceDexterityValue: Int?
  raceIntelligence = raceIntelligenceValue <+  0 
  raceIntelligenceValue: Int?
  raceWisdom = raceWisdomValue <+  0 
  raceWisdomValue: Int?
  raceCharisma = raceCharismaValue <+  0 
  raceCharismaValue: Int?

  strength     : Int = baseStrength     + 2 + levelStrength     + raceStrength     + sum(items.strength)
  constitution : Int = baseConstitution + 2 + levelConstitution + raceConstitution + sum(items.constitution)
  dexterity    : Int = baseDexterity    + 2 + levelDexterity    + raceDexterity    + sum(items.dexterity)
  intelligence : Int = baseIntelligence + 2 + levelIntelligence + raceIntelligence + sum(items.intelligence)
  wisdom       : Int = baseWisdom       + 2 + levelWisdom       + raceWisdom       + sum(items.wisdom)
  charisma     : Int = baseCharisma     + 2 + levelCharisma     + raceCharisma     + sum(items.charisma)

  // armor class, hit points and total item level
  armorClass           : Int = sum(items.armorClass)
  maximumHitPoints     : Int = sum(items.maximumHitPoints)     + sum(boons.maximumHitPoints)
  totalItemLevel       : Int = sum(items.itemLevel)

  // ratings
  power                : Int = sum(items.power)                + sum(boons.power)
  criticalStrike       : Int = sum(items.criticalStrike)       + sum(boons.criticalStrike)
  armorPenetration     : Int = sum(items.armorPenetration)     + sum(boons.armorPenetration)
  recovery             : Int = sum(items.recovery)             + sum(boons.recovery)
  actionPointGain      : Int = sum(items.actionPointGain)      + sum(boons.actionPointGain)
  combatAdvantageBonus : Int = sum(items.combatAdvantageBonus) + sum(boons.combatAdvantageBonus)
  controlBonus         : Int = sum(items.controlBonus)         + sum(boons.controlBonus)
  defense              : Int = sum(items.defense)              + sum(boons.defense)
  deflect              : Int = sum(items.deflect)              + sum(boons.deflect)
  regeneration         : Int = sum(items.regeneration)         + sum(boons.regeneration)
  lifeSteal            : Int = sum(items.lifeSteal)            + sum(boons.lifeSteal)
  tenacity             : Int = sum(items.tenacity)             + sum(boons.tenacity)
  staminaGain          : Int = sum(items.staminaGain)          + sum(boons.staminaGain)
  incomingHealingBonus : Int = sum(items.incomingHealingBonus) + sum(boons.incomingHealingBonus)
  aoeResist            : Int = sum(items.aoeResist)            + sum(boons.aoeResist)
  controlResist        : Int = sum(items.controlResist)        + sum(boons.controlResist)
  movement             : Int = sum(items.movement)             + sum(boons.movement)
  companionInfluence   : Int = sum(items.companionInfluence)   + sum(boons.companionInfluence)
  goldGain             : Int = sum(items.goldGain)             + sum(boons.goldGain)

  // stats
}

entity Item {
  name : String

  // ability scores
  strength = strengthValue <+  0 
  strengthValue: Int?
  constitution = constitutionValue <+  0 
  constitutionValue: Int?
  dexterity = dexterityValue <+  0 
  dexterityValue: Int?
  intelligence = intelligenceValue <+  0 
  intelligenceValue: Int?
  wisdom = wisdomValue <+  0 
  wisdomValue: Int?
  charisma = charismaValue <+  0 
  charismaValue: Int?

  // armor class, hit points and total item level
  armorClass = armorClassValue <+  0 
  armorClassValue: Int?
  maximumHitPoints = maximumHitPointsValue <+  0 
  maximumHitPointsValue: Int?
  itemLevel            : Int

  // ratings
  power = powerValue <+  0 
  powerValue: Int?
  criticalStrike = criticalStrikeValue <+  0 
  criticalStrikeValue: Int?
  armorPenetration = armorPenetrationValue <+  0 
  armorPenetrationValue: Int?
  recovery = recoveryValue <+  0 
  recoveryValue: Int?
  actionPointGain = actionPointGainValue <+  0 
  actionPointGainValue: Int?
  combatAdvantageBonus = combatAdvantageBonusValue <+  0 
  combatAdvantageBonusValue: Int?
  controlBonus = controlBonusValue <+  0 
  controlBonusValue: Int?
  defense = defenseValue <+  0 
  defenseValue: Int?
  deflect = deflectValue <+  0 
  deflectValue: Int?
  regeneration = regenerationValue <+  0 
  regenerationValue: Int?
  lifeSteal = lifeStealValue <+  0 
  lifeStealValue: Int?
  tenacity = tenacityValue <+  0 
  tenacityValue: Int?
  staminaGain = staminaGainValue <+  0 
  staminaGainValue: Int?
  incomingHealingBonus = incomingHealingBonusValue <+  0 
  incomingHealingBonusValue: Int?
  aoeResist = aoeResistValue <+  0 
  aoeResistValue: Int?
  controlResist = controlResistValue <+  0 
  controlResistValue: Int?
  movement = movementValue <+  0 
  movementValue: Int?
  companionInfluence = companionInfluenceValue <+  0 
  companionInfluenceValue: Int?
  goldGain = goldGainValue <+  0 
  goldGainValue: Int?

  // stats
}

entity ItemInstance {
  name : String = item.name

  rank : Int?

  // ability scores
  strength     : Int = item.strength
  constitution : Int = item.constitution
  dexterity    : Int = item.dexterity
  intelligence : Int = item.intelligence
  wisdom       : Int = item.wisdom
  charisma     : Int = item.charisma

  // armor class, hit points and total item level
  armorClass           : Int = item.armorClass           + sum(enchantments.armorClass)
  itemLevel            : Int = item.itemLevel            + sum(enchantments.itemLevel)
  maximumHitPoints     : Int = item.maximumHitPoints     + sum(enchantments.maximumHitPoints)

  // ratings
  power                : Int = item.power                + sum(enchantments.power)
  criticalStrike       : Int = item.criticalStrike       + sum(enchantments.criticalStrike)
  armorPenetration     : Int = item.armorPenetration     + sum(enchantments.armorPenetration)
  recovery             : Int = item.recovery             + sum(enchantments.recovery)
  actionPointGain      : Int = item.actionPointGain      + sum(enchantments.actionPointGain)
  combatAdvantageBonus : Int = item.combatAdvantageBonus + sum(enchantments.combatAdvantageBonus)
  controlBonus         : Int = item.controlBonus         + sum(enchantments.controlBonus)
  defense              : Int = item.defense              + sum(enchantments.defense)
  deflect              : Int = item.deflect              + sum(enchantments.deflect)
  regeneration         : Int = item.regeneration         + sum(enchantments.regeneration)
  lifeSteal            : Int = item.lifeSteal            + sum(enchantments.lifeSteal)
  tenacity             : Int = item.tenacity             + sum(enchantments.tenacity)
  staminaGain          : Int = item.staminaGain          + sum(enchantments.staminaGain)
  incomingHealingBonus : Int = item.incomingHealingBonus + sum(enchantments.incomingHealingBonus)
  aoeResist            : Int = item.aoeResist            + sum(enchantments.aoeResist)
  controlResist        : Int = item.controlResist        + sum(enchantments.controlResist)
  movement             : Int = item.movement             + sum(enchantments.movement)
  companionInfluence   : Int = item.companionInfluence   + sum(enchantments.companionInfluence)
  goldGain             : Int = item.goldGain             + sum(enchantments.goldGain)

  // stats
}
relation ItemInstance.item 1 <-> * Item.instances
relation ItemInstance.enchantments * <-> * ItemInstance.enchants

relation Character.items * <-> ? ItemInstance.character

entity Boon {
//    name : String

  // hit points
  maximumHitPoints = maximumHitPointsValue <+  0 
  maximumHitPointsValue: Int?

  // ratings
  power = powerValue <+  0 
  powerValue: Int?
  criticalStrike = criticalStrikeValue <+  0 
  criticalStrikeValue: Int?
  armorPenetration = armorPenetrationValue <+  0 
  armorPenetrationValue: Int?
  recovery = recoveryValue <+  0 
  recoveryValue: Int?
  actionPointGain = actionPointGainValue <+  0 
  actionPointGainValue: Int?
  combatAdvantageBonus = combatAdvantageBonusValue <+  0 
  combatAdvantageBonusValue: Int?
  controlBonus = controlBonusValue <+  0 
  controlBonusValue: Int?
  defense = defenseValue <+  0 
  defenseValue: Int?
  deflect = deflectValue <+  0 
  deflectValue: Int?
  regeneration = regenerationValue <+  0 
  regenerationValue: Int?
  lifeSteal = lifeStealValue <+  0 
  lifeStealValue: Int?
  tenacity = tenacityValue <+  0 
  tenacityValue: Int?
  staminaGain = staminaGainValue <+  0 
  staminaGainValue: Int?
  incomingHealingBonus = incomingHealingBonusValue <+  0 
  incomingHealingBonusValue: Int?
  aoeResist = aoeResistValue <+  0 
  aoeResistValue: Int?
  controlResist = controlResistValue <+  0 
  controlResistValue: Int?
  movement = movementValue <+  0 
  movementValue: Int?
  companionInfluence = companionInfluenceValue <+  0 
  companionInfluenceValue: Int?
  goldGain = goldGainValue <+  0 
  goldGainValue: Int?

  // stats
  criticalChance = criticalChanceValue <+  0.0 
  criticalChanceValue: Float?
  criticalSeverity = criticalSeverityValue <+  0.0 
  criticalSeverityValue: Float?
  resistanceIgnored = resistanceIgnoredValue <+  0.0 
  resistanceIgnoredValue: Float?
  rechargeSpeedIncrease = rechargeSpeedIncreaseValue <+  0.0 
  rechargeSpeedIncreaseValue: Float?
  actionPointGainStat = actionPointGainStatValue <+  0.0 
  actionPointGainStatValue: Float?
  damageResistance = damageResistanceValue <+  0.0 
  damageResistanceValue: Float?
  deflectionChance = deflectionChanceValue <+  0.0 
  deflectionChanceValue: Float?
  deflectionSeverity = deflectionSeverityValue <+  0.0 
  deflectionSeverityValue: Float?
  healthRegeneration = healthRegenerationValue <+  0.0 
  healthRegenerationValue: Float?
  bonusIncomingHealing = bonusIncomingHealingValue <+  0.0 
  bonusIncomingHealingValue: Float?
  lifeStealChance = lifeStealChanceValue <+  0.0 
  lifeStealChanceValue: Float?
  lifeStealSeverity = lifeStealSeverityValue <+  0.0 
  lifeStealSeverityValue: Float?
  damageResistancePvP = damageResistancePvPValue <+  0.0 
  damageResistancePvPValue: Float?
  armorPenetrationResistancePvP = armorPenetrationResistancePvPValue <+  0.0 
  armorPenetrationResistancePvPValue: Float?
  criticalStrikeResistancePvP = criticalStrikeResistancePvPValue <+  0.0 
  criticalStrikeResistancePvPValue: Float?
  controlResistancePvP = controlResistancePvPValue <+  0.0 
  controlResistancePvPValue: Float?
  xpBonus = xpBonusValue <+  0.0 
  xpBonusValue: Float?
  goldBonus = goldBonusValue <+  0.0 
  goldBonusValue: Float?
  gloryBonus = gloryBonusValue <+  0.0 
  gloryBonusValue: Float?
  runSpeedBonus = runSpeedBonusValue <+  0.0 
  runSpeedBonusValue: Float?
}

relation Character.boons * <-> * Boon.characters